require('dotenv').config();
const { Telegraf } = require('telegraf');
const express = require('express');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

// Middleware
app.use(express.json());

// ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ========== //
bot.start((ctx) => {
  console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.id}`);
  return ctx.reply('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel! üöÄ');
});

bot.command('shop', (ctx) => {
  return ctx.reply('–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω:', {
    reply_markup: {
      inline_keyboard: [
        [{
          text: 'üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω',
          web_app: { url: process.env.WEBAPP_URL || 'https://your-web-app.vercel.app' }
        }]
      ]
    }
  });
});

// ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel ========== //
app.post('/api/bot', (req, res) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫:', req.body);
    return bot.handleUpdate(req.body, res);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err);
    return res.status(200).send();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/', (req, res) => {
  res.status(200).json({ 
    status: 'running',
    bot: 'Telegram Bot',
    webhook: 'POST /api/bot'
  });
});

// ========== –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel ========== //
module.exports = app;

// ========== –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ========== //
if (process.env.NODE_ENV === 'development') {
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    bot.launch()
      .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'))
      .catch(console.error);
  });
}